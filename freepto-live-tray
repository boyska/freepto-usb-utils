#!/usr/bin/env python2
'''
GTK helper to know persistence status
'''
from subprocess import call, check_output, CalledProcessError
import logging
logging.basicConfig(level=logging.INFO)

import gtk

try:
    import vte
except:
    error = gtk.MessageDialog(None, flags=gtk.DIALOG_MODAL,
                              type=gtk.MESSAGE_ERROR,
                              buttons=gtk.BUTTONS_OK,
                              message_format=
                              'You need to install python bindings for libvte'
                              )
    error.run()
    import sys
    sys.exit(1)


### Messages {{{
messages = {'ABSENT_expl': {}, 'MOUNTED_expl': {}, 'LIVE_expl': {},
            'misc_info': {}}
messages['misc_info'] = {
    'it_IT': """Il tuo disco e' <tt>%(disk)s</tt>""",
    'en_US': """Your disk is <tt>%(disk)s</tt>"""
}
messages['ABSENT_expl'] = {
    'it_IT': """Non abbiamo rilevato alcuna persistenza, vuoi crearla ?

""" + messages['misc_info']['it_IT'],
    'en_US': """No persistence detected, do you want to create it ?

""" + messages['misc_info']['en_US']
}
messages['MOUNTED_expl'] = {
    'it_IT': "La persistenza e' montata correttamente, perfetto!",
    'en_US': "Persistence is correctly mounted, everything is fine"
}
messages['LIVE_expl'] = {
    'it_IT': """Sembra che ci sia una persistenza, ma non la hai montata.

Riavviare potrebbe risolvere""",
    'en_US': """It seems that there is a persistence, but you didn't mount it.

Reboot may be helpful"""
}
messages['VIRTUAL_expl'] = {
    'it_IT': """Stai eseguendo Freepto su una macchina virtuale.

Un host fisico non fidato potrebbe essere un rischio per la tua privacy"""
    'en_US': """Freepto seems running on a virtual machine.

This could be a risk for your privacy"""
}


def get_message(key, lang=None):
    if lang is None:
        lang = os.environ['LANG'].split('.')[0] \
            if 'LANG' in os.environ else 'en_US'
    if key in messages:
        localizations = messages[key]
        if lang in localizations:
            return localizations[lang]
        logging.warn("Can't found %s localization for '%s'" % (lang, key))
        if 'en_US' in localizations:
            return localizations['en_US']
        if localizations.keys():
            return localizations[localizations.keys()[0]]
        return 'No valid localization for "%s"' % key
    logging.warn("Message key not found: '%s'" % key)
    return key
### Messages }}}


### Check-persistence {{{
def get_root_device():
    try:
        return check_output(["check-persistence", "get-root-device"]).strip()
    except CalledProcessError:
        return None


def get_persistence_status():
    '''return one of MOUNTED, LIVE, ABSENT'''
    def sub_check(subcmd):
        ret = call(['check-persistence', subcmd])
        if ret == 0:
            return True
        if ret == 10:
            return False
        raise Exception('Error checking persistence status')
    if sub_check('is-mounted'):
        return 'MOUNTED'
    if sub_check('has-avail-persistence'):
        return 'LIVE'
    return 'ABSENT'
### Check-persistence }}}

### Check virtualization {{{
def check_virtualization():
    '''
    check if freepto is running on a virtualized system.
    return values:
        VIRTUAL
        NOTVIRTUAL
    '''
    def sub_check(subcmd):
        virt = call(['check-virtual', subcmd])
        if ret == 0:
            return True
        if ret == 10:
            return False
        raise Exception('Error checking virtualization status')
    if sub_check('is_virtual'):
        return 'VIRTUAL'
    return 'NOTVIRTUAL'

# Check virtaulization }}}

class LiveIcon:
    '''
    A status icon with 3 possible statuses:
        MOUNTED
        LIVE
        ABSENT
    '''

    def __init__(self):
        self.icon = gtk.StatusIcon()
        self.status = None
        self.refresh_icon()
        try:
            self.status = get_persistence_status()
        except Exception:
            logging.exception("Status unknown")
        self.dialog = None
        self.refresh_icon()
        self.icon.connect("activate", self.show_popup)
        self.icon.connect("popup-menu", self.right_click_event)

    def refresh_icon(self):
        if self.status == 'MOUNTED':
            self.icon.set_from_stock(gtk.STOCK_YES)
            self.icon.set_tooltip("Persistence mounted")
        elif self.status == 'LIVE':
            self.icon.set_from_stock(gtk.STOCK_NO)
            self.icon.set_tooltip("Persistence not mounted, but available " +
                                  "(maybe you want to reboot?)")
        elif self.status == 'ABSENT':
            self.icon.set_from_stock(gtk.STOCK_CDROM)
            self.icon.set_tooltip("Persistence not available " +
                                  "(do you want to create it?)")
        else:
            self.icon.set_from_stock(gtk.STOCK_NEW)
            self.icon.set_tooltip('Checking...')

    def right_click_event(self, icon, button, time):
        menu = gtk.Menu()
        quit = gtk.MenuItem("Quit")
        quit.connect("activate", gtk.main_quit)
        menu.append(quit)
        menu.show_all()
        menu.popup(None, None, gtk.status_icon_position_menu,
                   button, time, self.icon)

    def show_popup(self, widget):
        '''
        this is the main informational popup; will show basic informational
        and act as "wizard"
        '''
        if self.dialog:
            logging.debug("already open")
            self.dialog.destroy()
            return

        values = {'disk': get_root_device()}

        msg = get_message("%s_expl" % self.status) % values
        if self.status == 'ABSENT':
            self.dialog = gtk.MessageDialog(None, flags=gtk.DIALOG_MODAL,
                                            type=gtk.MESSAGE_QUESTION,
                                            buttons=gtk.BUTTONS_YES_NO)
            self.dialog.set_markup(msg)
            self.dialog.set_title("Persistence helper")
            response = self.dialog.run()
            self.dialog.destroy()
            self.dialog = None
            if response == gtk.RESPONSE_YES:
                vmsg = get_message("%s_expl" % self.status) % values
                if check_virtualization() == "VIRTUAL":
                    self.dialog = gtk.MessageDialog(None, flags=gtk.DIALOG_MODAL,
                                                    type=gtk.MESSAGE_QUESTION,
                                                    buttons=gtk.BUTTONS_YES_NO)
                    self.dialog.set_markup(vmsg)
                    self.dialog.set_title("Virtualization Checking")
                    virtresponse = self.dialog.run()
                    self.dialog.destroy()
                    self.dialog = None
                else:
                    ''' if not virtualization detected,
                    set virtrespose variable to yes '''
                    virtresponse = gtk.RESPONSE_YES
                if virtresponse == gtk.RESPONSE_YES:
                    if get_root_device() is not None:
                        self.make_persistence()
                    else:
                        err = gtk.MessageDialog(None, type=gtk.MESSAGE_ERROR,
                                                buttons=gtk.BUTTONS_OK)
                        err.set_markup("Can't detect disk, aborting")
                        err.set_title("Error: disk not detected")
                        err.run()
                        err.destroy()
            else:
                self.dialog = gtk.MessageDialog(None,
                                                flags=gtk.DIALOG_MODAL,
                                                buttons=gtk.BUTTONS_OK)
                self.dialog.set_markup(msg)
                self.dialog.set_title("Persistence helper")
                self.dialog.run()
                self.dialog.destroy()
                self.dialog = None

    def make_persistence(self):
        '''apre un terminale ed esegue lo script indicato in command'''
        #TODO: muovere dentro LiveIcon ?
        emulation = "xterm"
        #command = "/usr/bin/find /root -type d"
        #command = "/usr/bin/makepersistence"
        command = ["makepersistence", "-r", "%s2" % get_root_device()]
        if os.getuid() != 0:
            command = ["su-to-root", "-X", "-c", " ".join(command)]
        term = vte.Terminal()
        term.set_emulation(emulation)

        def post_persistence(window, term):
            '''
            cose da fare dopo che lo script makepersistence ha fatto il suo
            sporco lavoro.
            attualmente ricontrollo lo status della persistenza, aggiorno
            l'icona e chiudo il terminale
            '''
            icon.status = get_persistence_status()
            icon.refresh_icon()
            ret = term.get_child_exit_status()
            if ret == 0:
                msg = gtk.MessageDialog(window, buttons=gtk.BUTTONS_OK)
                msg.set_markup("Esecuzione completa\n\n" +
                               "sembra essere andato tutto bene\n" +
                               "guarda la finestra per esserne sicuro")
                msg.set_title("makepersistence complete")
            else:
                msg = gtk.MessageDialog(window, type=gtk.MESSAGE_ERROR,
                                        buttons=gtk.BUTTONS_OK)
                msg.set_markup("Errori nell'esecuzione\n\n" +
                               "codice %d" % ret)
                msg.set_title("makepersistence complete")

            msg.run()
            msg.destroy()
            window.destroy()

        termwindow = gtk.Window()
        scrollbar = gtk.VScrollbar()
        scrollbar.set_adjustment(term.get_adjustment())

        box = gtk.HBox()
        box.pack_start(term)
        box.pack_start(scrollbar)

        termwindow.add(box)
        term.connect("child-exited",
                     lambda term: post_persistence(termwindow, term))
        term.fork_command(command[0], command)

        termwindow.connect('delete-event',
                           lambda window, event: window.destroy())
        termwindow.show_all()


if __name__ == '__main__':
    import os
    os.environ['PATH'] += ':.'
    icon = LiveIcon()
    gtk.main()

# vim: set ft=python ts=4 sw=4 et fdm=marker:
