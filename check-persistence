#!/usr/bin/env bash
RET_PERSISTENCE_FOUND=0
RET_SYNTAX_ERROR=1
RET_NOPERSISTENCE=10
VERBOSE=0

usage() {
	# the -n and the trailing backslash are to avoid useless newlines
	echo -en "\
Usage: $0 [options] COMMAND
Options can be:
\t-v\tverbose (without this, there is barely any output)

COMMAND can be one of:
\tis-mounted\tcheck if persistence is mounted
\tget-root-device\treturns the device from where freepto is running
\thas-avail-persistence\tcheck if there is a persistence partition

Exit codes are:
0\ton success
10\tfor 'not found'
1\tfor generic errors
2\tfor syntax errors
"
}
verbose() {
  if [ "$VERBOSE" -eq 1 ]; then
    echo $* >&2
  fi
}

is_mounted() {
  mapper=$(awk '$2 ~ /^\/lib\/live\/mount\/persistence/ { print $1 }' \
	  /proc/mounts | head -n1)
  if [ -z "$mapper" ]; then
    verbose "No persistence mounted"
    return ${RET_NOPERSISTENCE}
  fi
  #device=$(dmsetup TODO)
  #mountpoint=$(awk '{ print $NF }' <<<$dfrow)
  echo "$mapper"
  return ${RET_PERSISTENCE_FOUND}
}

get_root_partition() {
	partition=$(awk '$2 ~ /^\/lib\/live\/mount\/medium$/ { print $1 }' \
		/proc/mounts | head -n1)
	if [ -z "$partition" ]; then
		verbose "No root partition found; are you inside freepto?"
		return ${RET_NOPERSISTENCE}
	fi
	if [ ! -b "$partition" ]; then
		verbose "We found $partition, which doesn't look like a block" \
			"device"
		return 1
	fi
	echo $partition
	return ${RET_PERSISTENCE_FOUND}
}

get_root_device() {
	partition=$(get_root_partition)
	ret=$?
	if [[ $ret -ne ${RET_PERSISTENCE_FOUND} ]]; then
		return $ret
	fi
	dev=${partition:0:$(( ${#partition} - 1 ))}
	if [[ "$dev" = "$partition" ]]; then
		verbose "Some error occurred going from partition to device"
		return 1
	elif [[ ! -b "$dev" ]]; then
		verbose "Device '$dev' is not a proper block file"
		return 1
	fi
	echo $dev
	return ${RET_PERSISTENCE_FOUND}
}

# check if there is a partition that seems to be a persistence
# if process is privileged enough, deeper checks will be done
# if found, output the partition device (ie: /dev/sdb2)
has_avail_persistence() {
	dev=$(get_root_device)
	ret=$?
	if [[ $ret -ne 0 ]]; then
		return $ret
	fi
	persistence="${dev}2"
	if [[ ! -b "$persistence" ]]; then
	  verbose "There is no persistence partition"
	  return ${RET_NOPERSISTENCE}
	fi
	if which cryptsetup &> /dev/null; then
	  cryptsetup=cryptsetup
	elif [[ -x /sbin/cryptsetup ]]; then
	  cryptsetup=/sbin/cryptsetup
	else
	  echo "Cryptsetup not found!" >&2
	  exit 1
	fi
	if [[ ! -r "$persistence" ]]; then
	  echo "Not able to check encryption; maybe you should be root?" >&2
	  echo $persistence
	  return ${RET_PERSISTENCE_FOUND}
	fi
	if udisks --show-info "$persistence" | fgrep 'type:' | grep 'crypto_LUKS'; then
	  verbose "$persistence is not an encrypted partition"
	  return ${RET_NOPERSISTENCE}
	fi
	echo $persistence
	return ${RET_PERSISTENCE_FOUND}
}


while getopts v opt; do
  case $opt in
    v)
      VERBOSE=1
      ;;
    \?)
      exit ${RET_SYNTAX_ERROR}
      ;;
  esac
done
shift $((OPTIND - 1))

cmd=$1
shift
case "$cmd" in
	is-mounted)
		if [ $# != 0 ]; then
			usage
			exit 1
		fi
		is_mounted
		exit $?
		;;

	get-root-device)
		if [ $# != 0 ]; then
			usage
			exit 1
		fi
		get_root_device
		exit $?
		;;

	has-avail-persistence)
		if [ $# != 0 ]; then
			usage
			exit 1
		fi
		has_avail_persistence
		exit $?
		;;

	*)
		echo "Command '$cmd' not found" >&2
		usage
		exit 2
		;;
esac

# vim: set noet:
